
const mssql = require('mssql')

const sqlConfig = {
    user: "tc24",
    password: "1234",
    database: "travelClinic",
    server: 'localhost', //Server to connect to. You can use 'localhost\instance' to connect to named instance.
    port: 1433, //Port to connect to (default: 1433). Don't set when connecting to named instance.
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    },
    options: {
        encrypt: false, // for azure use true
        trustServerCertificate: true // use true for local dev / self-signed certs
    }
}
const appPool = new mssql.ConnectionPool(sqlConfig)



// //===============================================================

const getClinics = async (req, theId) => {//פונקציה אסינכרונית המקבלת שני פרמטרים
    return new Promise(async (resolve, reject) => {// הבטחה להחזרת נתונים תקינים ושגויים
        try {
            let myConnectionPoolToDB = await appPool.connect()// ניסון התחברות לDB
            try {
                let results = await myConnectionPoolToDB.query(`select * from clinics`)// משתנה לאחסון תוצאות השאילתה
                resolve(results);// החזרת נתונים מוצלחים
            }
            catch (err) {// טיפול בשגיאה
                console.log("there was an error while sending query to DB ", err);
                reject(err);
            }
        }
        catch (err) {// שגיאת התחברות לDB
            console.error('ERROR CONNECTION TO DB: ', err);
            reject('ERROR CONNECTION TO DB: ', err);
        }
    })
}

module.exports.getClinics = getClinics;


// //===============================================================

const getVaccineCatalog = async (req, theId) => {//פונקציה אסינכרונית המקבלת שני פרמטרים
    return new Promise(async (resolve, reject) => {// הבטחה להחזרת נתונים תקינים ושגויים
        try {
            let myConnectionPoolToDB = await appPool.connect()
            try {
                let results = await myConnectionPoolToDB.query(`select * from VaccinCatalog`)// משתנה לאחסון תוצאות השאילתה
                resolve(results);// החזרת נתונים מוצלחים
            }
            catch (err) {// הצגת שגיאה
                console.log("there was an error while sending query to DB ", err);
                reject(err);
            }
        }
        catch (err) {// שגיאת התחברות לDB
            console.error('ERROR CONNECTION TO DB: ', err);
            reject('ERROR CONNECTION TO DB: ', err);
        }
    })
}

module.exports.getVaccineCatalog = getVaccineCatalog;

// //===============================================================

const setAppointment = async (req, HDN, clinic, datetime) => {// פונקציה אסינכורנית המקבלת 3 פרמטרים
    return new Promise(async (resolve, reject) => {// הבטחה להחזרת נתונים תקינים ושגויים
        try {
            // התחברות לDB
            let myConnectionPoolToDB = await appPool.connect();
            try { 
                console.log(HDN)
                console.log(clinic)
                console.log(datetime)
            
                //שימוש בסטור פרוסיג'ר
                let theResults = await myConnectionPoolToDB.request()
                .input("HDN", mssql.Int(), HDN) //make sure that HDN value we insert exists at HealthDeclaration table before hand 
                .input("nameOfClinic", mssql.NVarChar(), clinic) 
                .input("datetimeOfAppointment", mssql.DateTime(), datetime)   
                .execute('spInsertAppointment');
                
                // Handle the result if needed
                resolve(theResults);
                console.log('Insert successful:', theResults.recordset);
            }
            catch (err) {
                console.error('ERROR EXECUTING SQL QUERY: ', err);
                reject('ERROR EXECUTING SQL QUERY: ', err);
            }
        }
        catch (err) {
            console.error('ERROR CONNECTION TO DB: ', err);
            reject('ERROR CONNECTION TO DB: ', err);
        }
    })
}
module.exports.setAppointment = setAppointment;

// //===============================================================

const HDNformSubmission = async (req, userID, AcuteDisease, ChronicIllness,ImmuneSysDefect,PerMed,MedSensitivity,VaccAllergy,BloodTransfusion,Hepatitis,Pox,Pregnancy) => {// פונקציה אסינכורנית המקבלת  פרמטרים
    return new Promise(async (resolve, reject) => {//// הבטחה להחזרת נתונים תקינים ושגויים
        try {
            //חיבור לDB
            let myConnectionPoolToDB = await appPool.connect();
            try { 
                // הכנה שאילה להוספת הצהרת בריאות
                const HDNQuery = `
                INSERT INTO HealthDeclaration (userID, AcuteDisease, ChronicIllness,ImmuneSysDefect,PerMed,MedSensitivity,VaccAllergy,BloodTransfusion,Hepatitis,Pox,Pregnancy)
                VALUES (@userID, @AcuteDisease, @ChronicIllness,@ImmuneSysDefect,@PerMed,@MedSensitivity,@VaccAllergy,@BloodTransfusion,@Hepatitis,@Pox,@Pregnancy);
                `;
                    // הכנסת ערכים למקומות החסרים והרצת השאילתה
                let _ = await myConnectionPoolToDB.request()
                .input("userID", mssql.Char(), userID) 
                .input("AcuteDisease", mssql.Bit(), AcuteDisease) 
                .input("ChronicIllness", mssql.Bit(), ChronicIllness)   
                .input("ImmuneSysDefect", mssql.Bit(), ImmuneSysDefect)   
                .input("PerMed", mssql.Bit(), PerMed)   
                .input("MedSensitivity", mssql.Bit(), MedSensitivity)   
                .input("VaccAllergy", mssql.Bit(), VaccAllergy)   
                .input("BloodTransfusion", mssql.Bit(), BloodTransfusion)   
                .input("Hepatitis", mssql.Bit(), Hepatitis)   
                .input("Pox", mssql.Bit(), Pox)   
                .input("Pregnancy", mssql.Bit(), Pregnancy)   
                .query(HDNQuery);
                
                 // חלק זה של השאילה מחזיר את הערך המקסמילי של העמודה  ומבטיחה קבלת מזהה אחרון שהוקצה
                 const return_HDN_ID_Query = `
                 SELECT MAX(HDN) AS HDNGenID FROM HealthDeclaration WHERE userID = @userID;
                 `;
                // ביצוע שאילתה ואחזור המזהה
                 let HDNnum = await myConnectionPoolToDB.request()
                 .input("userID", mssql.Char(), userID) // הגדרת פרמטר 
                 .query(return_HDN_ID_Query);// שליחת השאילתה למסד הנתונים והחזרת התוצאה
                
                // Handle the result if needed
                resolve(HDNnum);
            }
            catch (err) {
                console.error('ERROR EXECUTING SQL QUERY: ', err);
                reject('ERROR EXECUTING SQL QUERY: ', err);
            }
        }
        catch (err) {
            console.error('ERROR CONNECTION TO DB: ', err);
            reject('ERROR CONNECTION TO DB: ', err);
        }
    })
}
module.exports.HDNformSubmission = HDNformSubmission;